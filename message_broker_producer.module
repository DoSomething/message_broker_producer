<?php
/**
 * @file
 * This module exposes the Message Broker object library to Drupal.
 */

/**
 * Implements hook_libraries_info().
 */
function message_broker_producer_libraries_info() {

  $libraries['messagebroker-phplib'] = array(
    'name' => 'Message Broker PHP Library',
    'vendor url' => 'https://github.com/DoSomething/messagebroker-phplib',
    'download url' => 'https://github.com/DoSomething/messagebroker-phplib',
    'version' => '1.0',
    'files' => array(
      'php' => array('MessageBroker-Drupal.php'),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_theme()
 */
function message_broker_producer_theme($existing, $type, $theme, $path) {
  return array(
    'message_broker_producer_status' => array(
      'variables' => array('status' => array(), 'test_links' => array()),
      'template' => 'templates/message-broker-producer-status',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function message_broker_producer_menu() {

   $items['admin/config/services/message-broker-producer'] = array(
    'title' => 'Message Broker',
    'description' => 'Message Broker resources - RabbitMQ status and settings.',
    'page callback' => 'message_broker_producer_status',
    'access arguments' => array('administer message_broker_producer'),
    'file' => 'message_broker_producer.admin.inc',
  );
  $items['admin/config/services/message-broker-producer/status'] = array(
    'title' => 'RabbitMQ Status',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10
  );
  $items['admin/config/services/message-broker-producer/mq-settings'] = array(
    'title' => 'RabbitMQ Settings',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('message_broker_producer_config_form'),
    'access arguments' => array('administer message_broker_producer'),
    'file' => 'message_broker_producer.admin.inc',
  );

  // Testing - remove for release
  $items['admin/config/services/message-broker-producer/test'] = array(
    'title' => 'Message Broker Test Transaction',
    'description' => 'Send all test transaction types',
    'page callback' => 'message_broker_producer_test_page',
    'access arguments' => array('administer message_broker_producer'),
  );
  $items['admin/config/services/message-broker-producer/test/%'] = array(
    'title' => 'Message Broker Test Transactions',
    'description' => 'Send specific test transactions.',
    'page callback' => 'message_broker_producer_test_page',
    'page arguments' => array(5),
    'access arguments' => array('administer message_broker_producer'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function message_broker_producer_permission() {
  return array(
    'administer message_broker_producer' =>  array(
      'title' => t('Administer Message Broker Producer'),
      'description' => t('Manage Message Broker Producer settings.'),
    )
  );
}

/**
 * Makes request to Message Broker PHP Library and RabbitMQ.
 *
 * @param $method
 *   The api method to request.
 *   @see For list of available methods - https://github.com/DoSomething/mobilecommons-php/blob/master/lib/MobileCommons/MobileCommons.php
 * @param $params
 *   An option associative array of parameters.
 *
 * @return
 *   A SimpleXML response object.
 */
function message_broker_producer_request($method = '', $param = array()) {

  $library = libraries_load('messagebroker-phplib');
  if (!empty($library['loaded'])) {
    if (!empty($method)) {

      // Connect to RabbitMQ
      $credentials = array(
        'host' => variable_get('message_broker_producer_rabbitmq_host', ''),
        'port' => variable_get('message_broker_producer_rabbitmq_port', ''),
        'username' => variable_get('message_broker_producer_rabbitmq_username', ''),
        'password' => variable_get('message_broker_producer_rabbitmq_password', ''),
        'vhost' => variable_get('message_broker_producer_rabbitmq_vhost', ''),
      );
      $config = array(
        'transactionalExchange' => variable_get('message_broker_producer_rabbitmq_transactional_exchange', ''),
      );
      $messageBroker = new MessageBroker($credentials, $config);

      // Add 'activity_timestamp' and 'application_id' to $param for
      // produceTransactional method call
      $param['activity_timestamp'] = time();
      $application_id = variable_get('message_broker_producer_application_id', NULL);
      if (!empty($application_id) && $application_id != -1) {
        $param['application_id'] = $application_id;
      }
      else {
        drupal_set_message('The application ID has not been set.', 'error');
        return;
      }

      $param = json_encode($param);
      return $MessageBroker->$method($param);

    }
    else {
      drupal_set_message('The intended method for message_broker_producer_request() must be defined.', 'error');
      return;
    }
  }
  else {
    drupal_set_message('Failed to load messagebroker-phplib library.', 'error');
    return;
  }
}

/**
 * Send test produceTransactional entry
 *
 * This is an example of how a Druapl app can produce a transactional message
 * entry in MessageBroker system. The $payload defines the values passed to the
 * consumers related to the activity. See the consumer docs for details.
 *
 * The $payload example below is for users signing up for a campaign. The
 * merge_var values are specific to the Mandrill service used by the related
 * consumer to send email messages.
 *
 * @param $action
 *   The type of test action / transaction to submit.
 */
function message_broker_producer_test($action = NULL) {

  if (empty($action) || $action == 'campaign-signup' || $action == 1) {
    $payload = array(
      'activity' => 'campaign-signup',
      'event_id' => 8012345,
      'email' => 'dlee+messagebroker-test-campaign-signup@dosomething.org',
      'merge_vars' => array(
        'FNAME' => 'First-Name',
        'CAMPAIGN_TITLE' => 'Campaign Test Title',
        'CALL_TO_ACTION' => 'Some call to action',
        'STEP_ONE' => 'Step one from Do It',
        'STEP_TWO' => 'Step two from Do It',
        'STEP_THREE' => 'Step three from Do It',
      ),
    );
    message_broker_producer_request('produceTransactional', $payload);
  }

  if (empty($action) || $action == 'user-register' || $action == 2) {
    $payload = array(
      'activity' => 'user-register',
      'email' => 'dlee+messagebroker-testnew-user@dosomething.org',
      'merge_vars' => array(
        'FNAME' => 'First-Name',
        'UID' => 1234
      ),
    );
    message_broker_producer_request('produceTransactional', $payload);
  }
}

/**
 * Wrapper function for message_broker_producer_test() as the function can be
 * called from both the admin UI as a link and a Drush command.
 *
 * @param $action
 *   The type of test action / transaction to submit.
 */
function message_broker_producer_test_page($action = NULL) {
  
  message_broker_producer_test($action);
  
  drupal_set_message('Producer ' . $action . ' test sent.', 'status');
  drupal_goto('admin/config/services/message-broker-producer/status');
}
